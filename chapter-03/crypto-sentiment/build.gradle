plugins {
  id 'application'

  // https://plugins.gradle.org/plugin/com.github.sherter.google-java-format
  id 'com.github.sherter.google-java-format' version '0.9'

  // https://plugins.gradle.org/plugin/net.ltgt.errorprone
  id 'net.ltgt.errorprone' version '2.0.1'

  // https://plugins.gradle.org/plugin/com.commercehub.gradle.plugin.avro
  id 'com.commercehub.gradle.plugin.avro' version '0.99.99'

  id 'maven-publish'
  id 'maven'
}

ext {
  kafkaVersion = '2.7.2'
}

application {
  mainClassName = 'com.magicalpipelines.App'
}

repositories {
  mavenCentral()
  maven {
      url "https://packages.confluent.io/maven"
  }
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}


avro {
  fieldVisibility = 'PRIVATE'
  stringType = "String"
  outputCharacterEncoding = "UTF-8"
}

dependencies {
  // Download zip file from https://www.confluent.io/hub/jcustenborder/kafka-connect-twitter
  // extract it to libs directory
  compile fileTree(dir: 'libs', include: '*.jar')

  implementation "org.apache.kafka:kafka-streams:${kafkaVersion}"

  // required for JSON serializer
  implementation 'com.google.code.gson:gson:2.9.0'

  implementation 'io.grpc:grpc-netty-shaded:1.45.1'

  // required for schema-registry-compatible Avro Serdes
  implementation ('io.confluent:kafka-streams-avro-serde:6.0.5') {
    // this was required for the 2.7 upgrade, since the kafka-streams-avro-serde
    // pulls in an incompatible transitive dependency (org.apache.kafka:kafka-clients:6.0.1-ccs)
    exclude group: 'org.apache.kafka', module: 'kafka-clients'
  }

  // required for registryless Avro
  implementation 'org.apache.avro:avro:1.11.0'
  implementation 'com.mitchseymour:kafka-registryless-avro-serdes:1.0.0'

  // required for sentiment analysis
  // implementation 'com.google.cloud:google-cloud-language:1.67.0'
  implementation 'com.google.cloud:google-cloud-language:2.1.11'


  // required for language translation
  // implementation 'com.google.cloud:google-cloud-translate:1.94.5'
  implementation 'com.google.cloud:google-cloud-translate:2.1.13'
  implementation 'com.google.cloud:libraries-bom:3.4.0@pom'

  // logging
  implementation 'ch.qos.logback:logback-classic:1.2.11'

  // test dependencies
  testImplementation "org.apache.kafka:kafka-streams-test-utils:${kafkaVersion}"
  testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
  testImplementation 'org.assertj:assertj-core:3.22.0'

  errorprone 'com.google.errorprone:error_prone_core:2.3.2'
  errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
}

// code formatting + error prone
tasks.withType(JavaCompile).configureEach { javaCompile ->
  javaCompile.dependsOn 'googleJavaFormat'
  options.compilerArgs << "-Xlint:deprecation"
  options.encoding = 'UTF-8'
  options.errorprone {
    disableWarningsInGeneratedCode = true
    excludedPaths = '.*/build/generated/.*'
  }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// the GAV of the generated POM can be set here
// gradle generatePomFileForMavenPublication
// gradle publishToLocalRepo
// build/publications/maven subfolder, a file called pom-default.xml.
publishing {
    publications {
        maven(MavenPublication) {          
            pom{
              name = 'cryptosentiment'
              groupId = 'com.magicalpipelines'
              artifactId = 'crypto-sentiment'
              version = '1.0.0-SNAPSHOT'
              properties = [
                    "java.version": "1.8",
                    "avro.version": "1.11.0",
                    "kafka.version": "2.7.2",
                    "project.build.sourceEncoding": "UTF-8"
                ]
            }
            from components.java
            repositories {
                maven {
                    // change URLs to point to your repos, e.g. http://my.org/repo
                    def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
                    def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

// gradle writeNewPom
// build/newpom.xml
task writeNewPom doLast {
    pom {
        project {
            groupId 'com.magicalpipelines'
            artifactId 'crypto-sentiment'
            version '1.0.0-SNAPSHOT'
        
            inceptionYear '2022'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
           
        }
        
    }.writeTo("$buildDir/newpom.xml")
}